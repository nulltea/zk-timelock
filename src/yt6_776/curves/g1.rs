use ark_ec::{
    models::{short_weierstrass::SWCurveConfig, CurveConfig},
    short_weierstrass::{Affine, Projective},
    AffineRepr, CurveGroup,
};
use ark_ff::{Field, MontFp};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::vec::Vec;

use crate::yt6_776::{Fq, Fr};

pub type G1Affine = Affine<Parameters>;
pub type G1Projective = Projective<Parameters>;

#[derive(Clone, Debug, PartialEq, Eq, CanonicalSerialize, CanonicalDeserialize)]
pub struct G1Prepared(pub G1Affine);

impl From<G1Affine> for G1Prepared {
    fn from(other: G1Affine) -> Self {
        G1Prepared(other)
    }
}

impl From<G1Projective> for G1Prepared {
    fn from(q: G1Projective) -> Self {
        q.into_affine().into()
    }
}

impl<'a> From<&'a G1Affine> for G1Prepared {
    fn from(other: &'a G1Affine) -> Self {
        G1Prepared(*other)
    }
}

impl<'a> From<&'a G1Projective> for G1Prepared {
    fn from(q: &'a G1Projective) -> Self {
        q.into_affine().into()
    }
}

impl G1Prepared {
    pub fn is_zero(&self) -> bool {
        self.0.is_zero()
    }
}

impl Default for G1Prepared {
    fn default() -> Self {
        G1Prepared(G1Affine::generator())
    }
}

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;

    /// COFACTOR =
    /// 75673557460576065407459652391109371628762786311287409373858118858175665244440829125823964371320275184431579737083462337
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x8d430006e6ddc2c1,
        0x67f4ddfa5857690e,
        0x1e2e5b97e341eebb,
        0xe788eb7f9b23c010,
        0x672d11ea9c117ff7,
        0x8d061dc4a92c459c,
        0x780
    ];

    /// COFACTOR^(-1) mod r =
    /// 2565203299949995746734759940387299613757915747179910827957223728085577644538928540655788142677924514759210122197706
    const COFACTOR_INV: Fr =
        MontFp!("2565203299949995746734759940387299613757915747179910827957223728085577644538928540655788142677924514759210122197706");
}

impl SWCurveConfig for Parameters {
    /// COEFF_A = 0
    const COEFF_A: Fq = Fq::ZERO;

    /// COEFF_B = 93312
    const COEFF_B: Fq = MontFp!("93312");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const GENERATOR: G1Affine = G1Affine::new_unchecked(G1_GENERATOR_X, G1_GENERATOR_Y);
}

/// G1_GENERATOR_X =
/// 108545833627835224615252200549986394471707629570503664929495882302743427640956001713553579749366437251076626120288509414819599006412906325609456608653396953194594283540673084157793498972066079810814809485341597964343439015227441050203
///
/// This is point (2, 83022966353075192081555803423176434629937481343878414368306061630903946707980033177937004130384305000343430506121328869181887471944304611133664106957583829514005100141284449350130644395617159724966246341093743304648781897149487562244)
/// removing the cofactor
pub const G1_GENERATOR_X: Fq = MontFp!("108545833627835224615252200549986394471707629570503664929495882302743427640956001713553579749366437251076626120288509414819599006412906325609456608653396953194594283540673084157793498972066079810814809485341597964343439015227441050203");

/// G1_GENERATOR_Y =
/// 10529272290064874351863124024912628560560693496165751737543407179756413775156133888892505375124372206194508706936167279705039952684597368970401920353642335732148853052441093049645187818152992333452229705663761133250479165873859957194
pub const G1_GENERATOR_Y: Fq = MontFp!("10529272290064874351863124024912628560560693496165751737543407179756413775156133888892505375124372206194508706936167279705039952684597368970401920353642335732148853052441093049645187818152992333452229705663761133250479165873859957194");
