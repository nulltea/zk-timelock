use ark_ec::{
    models::CurveConfig,
    short_weierstrass::{Affine, Projective, SWCurveConfig},
    AffineRepr, CurveGroup,
};
use ark_ff::{Field, MontFp};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::vec::Vec;

use crate::yt6_776::{Fq, Fq3, Fr};

pub type G2Affine = Affine<Parameters>;
pub type G2Projective = Projective<Parameters>;

#[derive(Clone, Debug, PartialEq, Eq, CanonicalSerialize, CanonicalDeserialize)]
pub struct G2Prepared(pub G2Affine);

impl From<G2Affine> for G2Prepared {
    fn from(other: G2Affine) -> Self {
        G2Prepared(other)
    }
}

impl From<G2Projective> for G2Prepared {
    fn from(q: G2Projective) -> Self {
        q.into_affine().into()
    }
}

impl<'a> From<&'a G2Affine> for G2Prepared {
    fn from(other: &'a G2Affine) -> Self {
        G2Prepared(*other)
    }
}

impl<'a> From<&'a G2Projective> for G2Prepared {
    fn from(q: &'a G2Projective) -> Self {
        q.into_affine().into()
    }
}

impl G2Prepared {
    pub fn is_zero(&self) -> bool {
        self.0.is_zero()
    }
}

impl Default for G2Prepared {
    fn default() -> Self {
        G2Prepared(G2Affine::generator())
    }
}

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq3;
    type ScalarField = Fr;

    /// COFACTOR =
    /// 6941854490287416822218664597754668652143094574673152055452564665091337663557813683323522078339767645328995016665729694181196318960273019040010245917750423593642667029747797843187200256474492327011226485048037960992760807137836996446972133414611245935494374678291413588414748434761913304086678792584675090949433601662017384858791999297094268391818764440841632520982393073429678577932587051437115462144290886467647258015528783608149848955964072571790353364759981182897181017243890149075169787442282722484323656397516324793845549180875550883907715282669875592903164849390743822650495621964
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0x7299d36e49a65b4c,
        0x646e5566776c4280,
        0x9cf89e66c139bd89,
        0xefdd418b69ffa908,
        0x2db043096b8cf96b,
        0x1b674c2c114f10e1,
        0xbfe2911b0fd26a84,
        0x4b72040fdfed891d,
        0x44a158e2cbd28eea,
        0x421d656206486973,
        0x501e1cffef94f73d,
        0x83228c366b33ef59,
        0x66735fb264b46182,
        0x516aeccfc880973b,
        0x93225347eb72ca52,
        0xc4f5d84fcaf3ef63,
        0x69aea24ec7e245ac,
        0x90ca9d9c49f0f39a,
        0x6d188de3b5fbbacd,
        0x22bbf03415451160,
        0xa2243445cd159355,
        0xf4ca7114488a35f7,
        0x24a479dce9e5ec9e,
        0xf964b1e7077bed3f,
        0x9d4399ce73aa1dfb,
        0x2cf52773c27c5f93,
        0xae2f2f332fa9e341,
        0x979a6d4b469a96f9,
        0x1b2a0b75ca101331,
        0xd6a4aa7da7261a1e,
        0x45b54d1
    ];

    /// COFACTOR^(-1) mod r =
    /// 3494581623768189988956369397084851204455421798993792282668752336712368638399588295027973391415640517951751405179949
    const COFACTOR_INV: Fr =
        MontFp!("3494581623768189988956369397084851204455421798993792282668752336712368638399588295027973391415640517951751405179949");
}

impl SWCurveConfig for Parameters {
    /// TWIST = (0, 1, 0)
    /// COEFF_A = G1::COEFF_A * TWIST^2
    const COEFF_A: Fq3 = Fq3::new(Fq::ZERO, Fq::ZERO, Fq::ZERO);

    /// TWIST = (0, 1, 0)
    /// COEFF_B = G1::COEFF_B * TWIST^3 = G1::COEFF_B * NONRESIDE
    const COEFF_B: Fq3 = Fq3::new(MontFp!("186624"), Fq::ZERO, Fq::ZERO);

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const GENERATOR: G2Affine = G2Affine::new_unchecked(G2_GENERATOR_X, G2_GENERATOR_Y);
    // This is the point (u + 1, 20266488162869422431516734475950538606450999932555677378676474452
    // 4818449137995610878145038107712783695267645576332247988683304598471739679235374028042456417
    // 550203062592002944749295574945785676499378000374163877725126362953145861446949*u^2 + 138700
    // 8442402413850226889019513353706909515208023732383047111178243463534651268758033627701522020
    // 3227425385863822447925028501529148255731840177574376022552533247743016472521879951579291105
    // 6007504735930436925484514699042906485190706034*u + 8690777157942784190117793514006269217676
    // 4459930046804926712805980620214731050637162433018167943324736572197607277889034603754590389
    // 4950714105517077210388739395502255265864206598036866109714755719073300365148395719998637727
    // 6377586399) multiplied by the cofactor
    //
    // The number of points on the curve
    // 2778414474288479457586331117086025686399452717880203615879384574611504309549574545903853804
    // 4054459604769922656138361160501668964936693300506586104701390842965741596786156084265385826
    // 5693430212142101960556748209816244521876551437547554464299566893097220571898511181873974046
    // 5673835325114936297868678026593098354973998241720084847121244250235440858551642388780896733
    // 1508472554542490957064891101103855399381277885705817257121522255280465272604812112271670735
    // 7694867391655464852200841290651759126691446401441712780622802608063641429172173037963065797
    // 6689191267097344702243263302739861988047337778613777141990040277620840498336815863972649836
    // 6934303598353758595230867904179411238196512398379565982940361668
}

const G2_GENERATOR_X: Fq3 = Fq3::new(G2_GENERATOR_X_C0, G2_GENERATOR_X_C1, G2_GENERATOR_X_C2);
const G2_GENERATOR_Y: Fq3 = Fq3::new(G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1, G2_GENERATOR_Y_C2);

/// G2_GENERATOR_X_C0 =
/// 164556278003996755176361799495675719280114256849303218761734345175591590832644876672139909589452081664409841634550594078427014729397964543010071474816992798863886119895977522730054071967086692598745589523819269564700010574843630953102
pub const G2_GENERATOR_X_C0: Fq = MontFp!("164556278003996755176361799495675719280114256849303218761734345175591590832644876672139909589452081664409841634550594078427014729397964543010071474816992798863886119895977522730054071967086692598745589523819269564700010574843630953102");

/// G2_GENERATOR_X_C1 =
/// 0
pub const G2_GENERATOR_X_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_X_C2 =
/// 0
pub const G2_GENERATOR_X_C2: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C0 =
/// 67016250963755086203173254309679945224734374807902527002243740474086000924233545085118141733061688330009368654950011895354183111279277445751706915624111397761386336962017484330726714813954017247023937614740353794632983763711734444429
pub const G2_GENERATOR_Y_C0: Fq = MontFp!("67016250963755086203173254309679945224734374807902527002243740474086000924233545085118141733061688330009368654950011895354183111279277445751706915624111397761386336962017484330726714813954017247023937614740353794632983763711734444429");

/// G2_GENERATOR_Y_C1 =
/// 0
pub const G2_GENERATOR_Y_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C2 =
/// 0
pub const G2_GENERATOR_Y_C2: Fq = Fq::ZERO;
