use ark_ec::{
    models::CurveConfig,
    short_weierstrass::{Affine, Projective, SWCurveConfig},
    AffineRepr, CurveGroup,
};
use ark_ff::{Field, MontFp};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::vec::Vec;

use crate::yata_127::{Fq, Fq3, Fr};

pub type G2Affine = Affine<Parameters>;
pub type G2Projective = Projective<Parameters>;

#[derive(Clone, Debug, PartialEq, Eq, CanonicalSerialize, CanonicalDeserialize)]
pub struct G2Prepared(pub G2Affine);

impl From<G2Affine> for G2Prepared {
    fn from(other: G2Affine) -> Self {
        G2Prepared(other)
    }
}

impl From<G2Projective> for G2Prepared {
    fn from(q: G2Projective) -> Self {
        q.into_affine().into()
    }
}

impl<'a> From<&'a G2Affine> for G2Prepared {
    fn from(other: &'a G2Affine) -> Self {
        G2Prepared(*other)
    }
}

impl<'a> From<&'a G2Projective> for G2Prepared {
    fn from(q: &'a G2Projective) -> Self {
        q.into_affine().into()
    }
}

impl G2Prepared {
    pub fn is_zero(&self) -> bool {
        self.0.is_zero()
    }
}

impl Default for G2Prepared {
    fn default() -> Self {
        G2Prepared(G2Affine::generator())
    }
}

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq3;
    type ScalarField = Fr;

    /// COFACTOR =
    /// 6447135585927700933407748811689132595890870311243558398603871172999994130868618551555035246040926632772227650412445248625332849385260495087351663445145363043186708714582233029464165666140730427829584314640004624189774065898629011465860428114872592416189741062553054179765831682246015931441771163985114638888831886882022621143566184396021756126445257896475423768255221342532242082040945189701515350770912588503662225892501095889405735860456297376095067247605870655726950349171865161964799340293657958849426147256294607101027123737730201967585596469531788433434380482507491392059431306859459850166309148845931479092632486865687253212
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0xe392da590ab390dc,
        0x2f60e7fcf13277b1,
        0x1da3c041afb73a98,
        0x18f78b83c5bd1de9,
        0x31156d5410253f07,
        0x419c8ddd9c2a1bb7,
        0x5847881e5116a7d4,
        0xdc8e36bb8f1d5104,
        0x581109251857cc4d,
        0x946f8ec49db699d6,
        0xa806738c244641c2,
        0x0ef7e47f9310c1f7,
        0x4d8f796f54e5a2af,
        0x88c9b7891e3e4a37,
        0x9c435d9ab0472788,
        0xaa7bd0af1dd44c60,
        0x8a2f4d58e2803d1f,
        0xc954c347d08ffdba,
        0x0c3efd1eb0fe32e3,
        0x4039c781171f373b,
        0xfa71c3bd2ddb56b5,
        0xcc5f47659bd6b08b,
        0x4438d33e536cbc22,
        0x2ecee613f5797235,
        0x598340b274fc7e7d,
        0x0d7220b638d2544d,
        0xef51b195ba4527c4,
        0x30feafb0f7be9a96,
        0xc698721a88ce722b,
        0x732e5c78a28b71b4,
        0x9187970b5c92597d,
        0x713784c13024806c,
        0xb570f10db745
    ];

    /// COFACTOR^(-1) mod r =
    /// 2111198320556845887376660656827115157401992140545550984805254627101401634376506928451168733189055140796931885454934
    const COFACTOR_INV: Fr =
        MontFp!("2111198320556845887376660656827115157401992140545550984805254627101401634376506928451168733189055140796931885454934");
}

impl SWCurveConfig for Parameters {
    /// TWIST = (0, 1, 0)
    /// COEFF_A = G1::COEFF_A * TWIST^2
    const COEFF_A: Fq3 = Fq3::new(Fq::ZERO, Fq::ZERO, Fq::ZERO);

    /// TWIST = (0, 1, 0)
    /// COEFF_B = G1::COEFF_B * TWIST^3 = G1::COEFF_B * NONRESIDE
    const COEFF_B: Fq3 = Fq3::new(MontFp!("52488000"), Fq::ZERO, Fq::ZERO);

    /// AFFINE_GENERATOR_COEFFS = (G2_GENERATOR_X, G2_GENERATOR_Y)
    const GENERATOR: G2Affine = G2Affine::new_unchecked(G2_GENERATOR_X, G2_GENERATOR_Y);
    // This is the point (u + 1, 29897401690947072766014132348109222839323622108051445260026835394
    // 1255960437849460521961477845810623090882193698159180889680487458690459074645054141873752242
    // 0674712311132415652079090796966477064984042197506891715744831030996765146005106214961708704
    // 8*u^2 + 14321460365309699679114413732396796334126973668674209059587688958378947028949511540
    // 8955981895172598324157466689473329182215920938208218786335122064581010808707710434270157543
    // 805905556825853990316189435562156053660864227411503639018535628138867070218*u + 93603410966
    // 8763462672361732822760280542077898422191421157265095057621291791076253274758040178466071979
    // 5500877392664385517158574550821179273079189658286507406685680681012986464866421253532019131
    // 2816191331900717751065302337959083202125106875736980052)
    // multiplied by the cofactor
    //
    // The number of points on the curve
    // 2580407707292667349539726116027712278773230032766944203490829578194046070350401610410337230
    // 3102307177558983142151189786762849987227127011538318509293345605505564023182671686121466310
    // 8334949169687209109463685835972583993538466977628074896549499194822802119239716065647463919
    // 7719006038785193823002678091826186670738581393447043303984153341171569934925308936668403874
    // 1349774246492221258740738584205097270153544685242689785638611759208036734180578889164544440
    // 9428517619454419470425664668893475812607214479741018864351414705599939535470650256770728922
    // 6760059493728647594040514062631170290442277380480683485573527868030560819341147643246267535
    // 8364937194478186066694257588094554093599178384786660727573845191778691961616006807677634554
    // 933230872077785844
}

const G2_GENERATOR_X: Fq3 = Fq3::new(G2_GENERATOR_X_C0, G2_GENERATOR_X_C1, G2_GENERATOR_X_C2);
const G2_GENERATOR_Y: Fq3 = Fq3::new(G2_GENERATOR_Y_C0, G2_GENERATOR_Y_C1, G2_GENERATOR_Y_C2);

/// G2_GENERATOR_X_C0 =
/// 189256901536266233326238814060376229472612821464743711592736327271619400466666929180415266714712254453130979821454317791587173833024854303438590896321719240141882372772182205416754404121057071187480500813008381283503972997872680373151468309224198107
pub const G2_GENERATOR_X_C0: Fq = MontFp!("189256901536266233326238814060376229472612821464743711592736327271619400466666929180415266714712254453130979821454317791587173833024854303438590896321719240141882372772182205416754404121057071187480500813008381283503972997872680373151468309224198107");

/// G2_GENERATOR_X_C1 =
/// 0
pub const G2_GENERATOR_X_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_X_C2 =
/// 0
pub const G2_GENERATOR_X_C2: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C0 =
/// 262221164801290070898569926029903537500007389250618156947356577132055204329822893842479836297994170567464301732324855718203854704244263237414720570500353926858687181889598249710116215610280497061594988491734073249080426186168152431134081259001020209
pub const G2_GENERATOR_Y_C0: Fq = MontFp!("262221164801290070898569926029903537500007389250618156947356577132055204329822893842479836297994170567464301732324855718203854704244263237414720570500353926858687181889598249710116215610280497061594988491734073249080426186168152431134081259001020209");

/// G2_GENERATOR_Y_C1 =
/// 0
pub const G2_GENERATOR_Y_C1: Fq = Fq::ZERO;

/// G2_GENERATOR_Y_C2 =
/// 0
pub const G2_GENERATOR_Y_C2: Fq = Fq::ZERO;
