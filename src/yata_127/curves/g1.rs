use ark_ec::{
    models::{short_weierstrass::SWCurveConfig, CurveConfig},
    short_weierstrass::{Affine, Projective},
    AffineRepr, CurveGroup,
};
use ark_ff::{Field, MontFp};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use ark_std::vec::Vec;

use crate::yata_127::{Fq, Fr};

pub type G1Affine = Affine<Parameters>;
pub type G1Projective = Projective<Parameters>;

#[derive(Clone, Debug, PartialEq, Eq, CanonicalSerialize, CanonicalDeserialize)]
pub struct G1Prepared(pub G1Affine);

impl From<G1Affine> for G1Prepared {
    fn from(other: G1Affine) -> Self {
        G1Prepared(other)
    }
}

impl From<G1Projective> for G1Prepared {
    fn from(q: G1Projective) -> Self {
        q.into_affine().into()
    }
}

impl<'a> From<&'a G1Affine> for G1Prepared {
    fn from(other: &'a G1Affine) -> Self {
        G1Prepared(*other)
    }
}

impl<'a> From<&'a G1Projective> for G1Prepared {
    fn from(q: &'a G1Projective) -> Self {
        q.into_affine().into()
    }
}

impl G1Prepared {
    pub fn is_zero(&self) -> bool {
        self.0.is_zero()
    }
}

impl Default for G1Prepared {
    fn default() -> Self {
        G1Prepared(G1Affine::generator())
    }
}

#[derive(Clone, Default, PartialEq, Eq)]
pub struct Parameters;

impl CurveConfig for Parameters {
    type BaseField = Fq;
    type ScalarField = Fr;

    /// COFACTOR =
    /// 73831424898055738890520401036781359556890080209416916282820004486074733845034831464304821246221059075339047558862668512464259208904717
    #[rustfmt::skip]
    const COFACTOR: &'static [u64] = &[
        0xc5dd0007ffeb000d,
        0x82fe84651c1426c0,
        0x01da78c4aa5145a7,
        0x06b99b6f27d67048,
        0x538abe7d2db06ef7,
        0x1ad7c04a13d851cd,
        0x1a0111eb238987dc
    ];

    /// COFACTOR^(-1) mod r =
    /// 3852817031829237036438514585552255945767152513918266070152863514131312236687683377121488082370457794000604421948704
    const COFACTOR_INV: Fr =
        MontFp!("3852817031829237036438514585552255945767152513918266070152863514131312236687683377121488082370457794000604421948704");
}

impl SWCurveConfig for Parameters {
    /// COEFF_A = 0
    const COEFF_A: Fq = Fq::ZERO;

    /// COEFF_B = 10497600
    const COEFF_B: Fq = MontFp!("10497600");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const GENERATOR: G1Affine = G1Affine::new_unchecked(G1_GENERATOR_X, G1_GENERATOR_Y);
}

/// G1_GENERATOR_X =
/// 277058353873846650349877711360329345767869752932325150786328260223537264570841165403928775575155004346769657249969076287649517928359010781252590043152056459488208807097439520757283062313797937173686495540003761270627489810135201906205017140806773134
///
/// This is point (1, 63133708608525092904612809325941259022069792624022671698515595036598068728707369511045137582150741365439663642014177386730010871888514626618760614907410521337426502706923332415766424877312586896188162874970021376406862056345720806241681756379376364)
/// removing the cofactor
pub const G1_GENERATOR_X: Fq = MontFp!("277058353873846650349877711360329345767869752932325150786328260223537264570841165403928775575155004346769657249969076287649517928359010781252590043152056459488208807097439520757283062313797937173686495540003761270627489810135201906205017140806773134");

/// G1_GENERATOR_Y =
/// 187056593267038000908245606262263145806962235013087328777582833627855281297161363739199646029037562979176281976731748422127589061828552798361601465602241766978812441849170481612980908196865169611227052266589230991021449889171224478037060801277692681
pub const G1_GENERATOR_Y: Fq = MontFp!("187056593267038000908245606262263145806962235013087328777582833627855281297161363739199646029037562979176281976731748422127589061828552798361601465602241766978812441849170481612980908196865169611227052266589230991021449889171224478037060801277692681");
